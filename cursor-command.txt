1. 개요
 AI 학습과 테스트를 이한 관리 페이지를 만들어야 함.
 프론트엔드는 nodejs로 하고 백엔드는 Python으로 하는 웹서비스를 위한 기본코드 폴더 구조를 만들어 주고 상세 개능은 아래있는 기능 리스트를 구현 해야 함.

2. 기능 리스트
 2.1. 프론트엔드 기능
  2.1.1. 최초 페이지 접근 시 인증이 되어 있지 않다면 로그인 페이지로 이동하고 로그인 할 수 있도록 구현
  2.1.2. 오른쪽 사이드 메뉴는 아래 와 같고 2단계 메뉴 구조로 표현
   학습
    - 학습파일 업로드 
     > 페이지설명 : 학습할 첨부파일을 업로드 하는 화면이 필요하고 기존에 업로드 된 학습 파일 리스트를 상단에 보여주고 각 파일을 선택 할 때 아래에 표형식으로 페이징하여 데이터를 보여주도록 함.
              데이터를 출력 할때는 페이지 당 50,100,200개를 보여줄 지 선택하는 버튼을 두고 백엔드로 파일정보를 요청하여 화면에 보여줌
	      "파일업로드" 버튼을 클릭하여 백엔드로 학습 파일 업로드 API를 호출하여 파일을 업로드함.
	      업로드된 파일 리스트 화면에서 오른쪽에 체크박스를 두고 선택된 파일에 대해 "학습하기" 버튼을 누르면 백엔드로 선택된 파일 학습하기 API를 호출해야 함.
   테스트
    - 모델 테스트 
     > 페이지설명 : 위 학습에서 생성된 모델 파일 리스트를 상단에 보여주고 선택을 후 테스트할 입력 테스트를 입력하고 "결과보기" 버튼을 누르면 입력된 텍스트가 스팸인지 아닌지 결과를 출력하는 화면
                테스트 엑셀 파일을 업로드 후 "결과보기" 버튼을 누르면 백엔드로 스팸여부 결과를 건별로 받아와서 엑셀 표의 오른쪽에 스팸여부 컬럼에 결과를 보여 주어야 함.
               
 2.2. 백엔드 기능
  2.2.1. jwt를 이용한 인증 토큰을 발급 해주는 기능을 만들어 주고 로그인 시 인증은 배포되는 폴더의 ./users/auth.dat 파일에 ID/PW를 저장 하도록 기능 구현
  2.2.2. 머신러닝 학습 API 리스트
   - 머신러닝 학습파일업로드 API를 만들어야 함. 업로드된 파일은 ./learning-data/ 하단에 파일을 저장.
   - 학습데이터 조회 API를 만들고 조회시 ./learning-data/ 하단에 있는 파일 리스트를 내려 주어야 함.
   - 학습데이터 데이터 조회 API를 만들고 조회 시 페이징에 따라 데이터를 내려 주어야 함.
   - 학습하기 API를 만들고 학습 할 파일 리스트를 받아서 tf-idf 방식의 나이브베이즈 학습을 처리하고 학습된 모델은 ./ml-model/ 하단에 yyyymmdd-# 방식으로 파일을 저장 해야 함.
  2.2.3. 학습된 모델 테스트 API 리스트
   - 프론트엔드에서 모델을 선택하고 입력된 텍스트를 받아서 스팸인지 아닌지 결과를 내려 주어야 함.

위 기능을 만족하는 코드 생성 해줘